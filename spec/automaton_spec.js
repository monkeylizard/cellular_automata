// Generated by CoffeeScript 1.10.0
(function() {
  describe('Automaton', function() {
    beforeEach(function() {
      this.grid_container = jQuery('<div/>');
      return this.grid = new Grid(this.grid_container, {
        height: 2,
        width: 2
      });
    });
    it('accepts a grid and a rule and applies the rule to the grid', function() {
      var automaton, rule;
      rule = function(x, y, grid) {
        return x === y;
      };
      automaton = new Automaton(this.grid, rule);
      spyOn(this.grid, 'set');
      automaton.step();
      expect(this.grid.set).toHaveBeenCalledWith({
        x: 0,
        y: 0
      }, 1);
      expect(this.grid.set).toHaveBeenCalledWith({
        x: 1,
        y: 1
      }, 1);
      expect(this.grid.set).toHaveBeenCalledWith({
        x: 0,
        y: 1
      }, 0);
      return expect(this.grid.set).toHaveBeenCalledWith({
        x: 1,
        y: 0
      }, 0);
    });
    it('makes all moves simultaneously', function() {
      var automaton, rule;
      rule = function(x, y, grid) {
        if ((x === y && y === 0)) {
          return true;
        }
        if (y > 0) {
          return false;
        }
        if (!grid.is_on({
          x: x - 1,
          y: y
        })) {
          return true;
        }
      };
      automaton = new Automaton(this.grid, rule);
      spyOn(this.grid, 'set').and.callThrough();
      automaton.step();
      expect(this.grid.set).toHaveBeenCalledWith({
        x: 0,
        y: 0
      }, 1);
      return expect(this.grid.set).toHaveBeenCalledWith({
        x: 1,
        y: 0
      }, 1);
    });
    it('can make moves at regular intervals', function() {
      var automaton, rule;
      jasmine.clock().install();
      rule = function(x, y, grid) {
        return !grid.is_on({
          x: x,
          y: y
        });
      };
      automaton = new Automaton(this.grid, rule, 1000);
      spyOn(this.grid, 'set').and.callThrough();
      automaton.start();
      jasmine.clock().tick(1000);
      expect(this.grid.set).toHaveBeenCalledWith({
        x: 0,
        y: 0
      }, 1);
      expect(this.grid.set).toHaveBeenCalledWith({
        x: 1,
        y: 0
      }, 1);
      expect(this.grid.set).toHaveBeenCalledWith({
        x: 0,
        y: 1
      }, 1);
      expect(this.grid.set).toHaveBeenCalledWith({
        x: 1,
        y: 1
      }, 1);
      expect(this.grid.set.calls.count()).toEqual(4);
      jasmine.clock().tick(1000);
      expect(this.grid.set).toHaveBeenCalledWith({
        x: 0,
        y: 0
      }, 0);
      expect(this.grid.set).toHaveBeenCalledWith({
        x: 1,
        y: 0
      }, 0);
      expect(this.grid.set).toHaveBeenCalledWith({
        x: 0,
        y: 1
      }, 0);
      expect(this.grid.set).toHaveBeenCalledWith({
        x: 1,
        y: 1
      }, 0);
      return jasmine.clock().uninstall();
    });
    it('can stop once started', function() {
      var automaton, rule;
      jasmine.clock().install();
      rule = function(x, y, grid) {
        return true;
      };
      automaton = new Automaton(this.grid, rule, 1000);
      spyOn(this.grid, 'set').and.callThrough();
      automaton.start();
      jasmine.clock().tick(1000);
      expect(this.grid.set.calls.count()).toEqual(4);
      jasmine.clock().tick(1000);
      expect(this.grid.set.calls.count()).toEqual(8);
      automaton.stop();
      jasmine.clock().tick(1000);
      expect(this.grid.set.calls.count()).toEqual(8);
      return jasmine.clock().uninstall();
    });
    return it('can clear the grid', function() {
      var automaton, rule;
      rule = function(x, y, grid) {
        return true;
      };
      automaton = new Automaton(this.grid, rule, 1000);
      automaton.step();
      automaton.clear();
      return expect(this.grid_container.find('[data-state="1"]').length).toEqual(0);
    });
  });

}).call(this);
