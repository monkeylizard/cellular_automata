// Generated by CoffeeScript 1.10.0
(function() {
  var Controls,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  this.Automaton = (function() {
    function Automaton(grid1, rule1, step_time) {
      this.grid = grid1;
      this.rule = rule1;
      this.step_time = step_time;
      this.step = bind(this.step, this);
      this.height = this.grid.height;
      this.width = this.grid.width;
    }

    Automaton.prototype.step = function() {
      return _.each(this._step_instructions(), (function(_this) {
        return function(row, row_number) {
          return _.each(row, function(value, cell_number) {
            return _this.grid.set({
              x: cell_number,
              y: row_number
            }, Number(value));
          });
        };
      })(this));
    };

    Automaton.prototype.start = function() {
      return this.interval_id = setInterval(this.step, this.step_time);
    };

    Automaton.prototype.stop = function() {
      return clearInterval(this.interval_id);
    };

    Automaton.prototype.clear = function() {
      return this._map_cells((function(_this) {
        return function(row_number, cell_number) {
          return _this.grid.turn_off({
            x: cell_number,
            y: row_number
          });
        };
      })(this));
    };

    Automaton.prototype._step_instructions = function() {
      return this._map_cells((function(_this) {
        return function(row_number, cell_number) {
          return _this.rule(cell_number, row_number, _this.grid);
        };
      })(this));
    };

    Automaton.prototype._map_cells = function(iteratee) {
      var i, ref, results;
      return _.map((function() {
        results = [];
        for (var i = 0, ref = this.height; 0 <= ref ? i < ref : i > ref; 0 <= ref ? i++ : i--){ results.push(i); }
        return results;
      }).apply(this), (function(_this) {
        return function(row_number) {
          var j, ref1, results1;
          return _.map((function() {
            results1 = [];
            for (var j = 0, ref1 = _this.width; 0 <= ref1 ? j < ref1 : j > ref1; 0 <= ref1 ? j++ : j--){ results1.push(j); }
            return results1;
          }).apply(this), function(cell_number) {
            return iteratee(row_number, cell_number);
          });
        };
      })(this));
    };

    return Automaton;

  })();

  this.CellularAutomata = (function() {
    var DEFAULT_HEIGHT, DEFAULT_STEP_TIME, DEFAULT_WIDTH;

    DEFAULT_HEIGHT = 30;

    DEFAULT_WIDTH = 50;

    DEFAULT_STEP_TIME = 100;

    function CellularAutomata(arg) {
      this.container = arg.container, this.rules = arg.rules, this.height = arg.height, this.width = arg.width, this.interactive = arg.interactive, this.step_time = arg.step_time;
      this.height || (this.height = DEFAULT_HEIGHT);
      this.width || (this.width = DEFAULT_WIDTH);
      this.step_time || (this.step_time = DEFAULT_STEP_TIME);
      if (this.interactive == null) {
        this.interactive = true;
      }
    }

    CellularAutomata.prototype.render = function(arg) {
      var rule_name;
      rule_name = arg.rule;
      this.container.empty();
      this._set_up_automaton_for(rule_name);
      this._set_up_control_buttons();
      this._set_up_menu(rule_name);
      return this._set_up_color_rules_for(rule_name);
    };

    CellularAutomata.prototype._set_up_automaton_for = function(rule_name) {
      return this.automaton = this._automaton_for(this.rules[rule_name]);
    };

    CellularAutomata.prototype._set_up_control_buttons = function() {
      return this._control_buttons().set_up();
    };

    CellularAutomata.prototype._set_up_menu = function(starting_rule) {
      return this._menu(starting_rule).set_up();
    };

    CellularAutomata.prototype._set_up_color_rules_for = function(rule_name) {
      return this._color_rules_for(this.rules[rule_name].colors).set_up();
    };

    CellularAutomata.prototype._control_buttons = function() {
      return new ButtonControls({
        container: this.container,
        automaton: this.automaton
      });
    };

    CellularAutomata.prototype._menu = function(starting_rule) {
      return new MenuControls({
        container: this.container,
        starting_rule: starting_rule,
        rules: this.rules,
        render: ((function(_this) {
          return function(options) {
            return _this.render(options);
          };
        })(this))
      });
    };

    CellularAutomata.prototype._color_rules_for = function(colors) {
      return new ColorRules({
        container: this.container,
        colors: colors
      });
    };

    CellularAutomata.prototype._automaton_for = function(rule) {
      return new Automaton(this._grid_for(rule), rule.rule, this.step_time);
    };

    CellularAutomata.prototype._grid_for = function(rule) {
      return new Grid(this.container, this._grid_options(rule));
    };

    CellularAutomata.prototype._grid_options = function(rule) {
      return {
        height: this.height,
        width: this.width,
        interactive: this.interactive,
        states: rule.states
      };
    };

    return CellularAutomata;

  })();

  this.ColorRules = (function() {
    function ColorRules(arg) {
      this.container = arg.container, this.colors = arg.colors;
    }

    ColorRules.prototype.set_up = function() {
      this._clear_existing_color_rules();
      return this._add_color_rules_for(this.colors);
    };

    ColorRules.prototype._clear_existing_color_rules = function() {
      return this.container.find('style').remove();
    };

    ColorRules.prototype._add_color_rules_for = function(colors) {
      return _.each(colors, (function(_this) {
        return function(color, index) {
          return _this._add_color_rule({
            color: color,
            index: index
          });
        };
      })(this));
    };

    ColorRules.prototype._add_color_rule = function(arg) {
      var color, index;
      color = arg.color, index = arg.index;
      return jQuery("<style>[data-state='" + index + "'] { background-color: " + color + "; }</style>").appendTo(this.container);
    };

    return ColorRules;

  })();

  Controls = (function() {
    function Controls(arg) {
      var container;
      container = arg.container;
      this.container = this._controls_container_in(container);
    }

    Controls.prototype._controls_container_in = function(container) {
      return this._existing_controls_container_in(container) || this._new_controls_container(container);
    };

    Controls.prototype._existing_controls_container_in = function(container) {
      var controls_container;
      controls_container = container.find('#controls_container');
      if (!(controls_container.length > 0)) {
        return;
      }
      return controls_container;
    };

    Controls.prototype._new_controls_container = function(container) {
      return jQuery('<div/>', {
        id: 'controls_container'
      }).appendTo(container);
    };

    return Controls;

  })();

  this.ButtonControls = (function(superClass) {
    extend(ButtonControls, superClass);

    function ButtonControls(arg) {
      var container;
      container = arg.container, this.automaton = arg.automaton;
      ButtonControls.__super__.constructor.call(this, {
        container: container
      });
    }

    ButtonControls.prototype.set_up = function() {
      this.container.empty();
      return this._set_up_control_buttons();
    };

    ButtonControls.prototype._set_up_control_buttons = function() {
      return _.each(['start', 'stop', 'step', 'clear'], (function(_this) {
        return function(option) {
          return _this.container.append(_this._control_button_for(option));
        };
      })(this));
    };

    ButtonControls.prototype._control_button_for = function(option) {
      var button;
      button = jQuery('<button/>', {
        id: option,
        text: this._capitalize(option)
      });
      button.on('click', (function(_this) {
        return function() {
          return _this.automaton[option]();
        };
      })(this));
      return button;
    };

    ButtonControls.prototype._capitalize = function(text) {
      return text.charAt(0).toUpperCase() + text.slice(1);
    };

    return ButtonControls;

  })(Controls);

  this.MenuControls = (function(superClass) {
    extend(MenuControls, superClass);

    function MenuControls(arg) {
      var container;
      container = arg.container, this.render = arg.render, this.rules = arg.rules, this.starting_rule = arg.starting_rule;
      MenuControls.__super__.constructor.call(this, {
        container: container
      });
    }

    MenuControls.prototype.set_up = function() {
      return this.container.append(this._menu());
    };

    MenuControls.prototype._menu = function() {
      this._create_menu();
      this._add_rule_options();
      this._set_starting_value();
      this._respond_to_changes();
      return this.menu;
    };

    MenuControls.prototype._create_menu = function() {
      return this.menu = jQuery('<select/>', {
        id: 'menu'
      });
    };

    MenuControls.prototype._set_starting_value = function() {
      return this.menu.val(this.starting_rule);
    };

    MenuControls.prototype._respond_to_changes = function() {
      return this.menu.change((function(_this) {
        return function() {
          return _this.render({
            rule: _this.menu.val()
          });
        };
      })(this));
    };

    MenuControls.prototype._add_rule_options = function() {
      return _.each(_.keys(this.rules), (function(_this) {
        return function(rule_name) {
          return _this.menu.append(_this._menu_item_for(rule_name));
        };
      })(this));
    };

    MenuControls.prototype._menu_item_for = function(rule_name) {
      return jQuery('<option/>', {
        value: rule_name,
        text: this.rules[rule_name].name
      });
    };

    return MenuControls;

  })(Controls);

  this.Grid = (function() {
    function Grid(container, arg) {
      var interactive;
      this.height = arg.height, this.width = arg.width, interactive = arg.interactive, this.states = arg.states;
      this.container = this._grid_container_in(container);
      this.states || (this.states = 2);
      this._add_grid_to_container();
      if (interactive) {
        this._add_interactivity();
      }
    }

    Grid.prototype.turn_on = function(coordinates) {
      return this.set(coordinates, 1);
    };

    Grid.prototype.turn_off = function(coordinates) {
      return this.set(coordinates, 0);
    };

    Grid.prototype.toggle = function(coordinates) {
      return this.set(coordinates, (this.state(coordinates) + 1) % this.states);
    };

    Grid.prototype.state = function(coordinates) {
      return Number(this._grid_cell(coordinates).attr('data-state'));
    };

    Grid.prototype.set = function(coordinates, value) {
      return this._grid_cell(coordinates).attr('data-state', value);
    };

    Grid.prototype._grid_container_in = function(container) {
      return this._existing_grid_container_in(container) || this._new_grid_container_in(container);
    };

    Grid.prototype._new_grid_container_in = function(container) {
      return jQuery('<div/>', {
        id: 'grid_container'
      }).appendTo(container);
    };

    Grid.prototype._existing_grid_container_in = function(container) {
      var grid_container;
      grid_container = container.find('#grid_container');
      if (!(grid_container.length > 0)) {
        return;
      }
      return grid_container;
    };

    Grid.prototype._add_interactivity = function() {
      var self;
      self = this;
      return this.grid.find('td').click(function() {
        return self.toggle(jQuery(this).data('coordinates'));
      });
    };

    Grid.prototype._grid_cell = function(arg) {
      var x, y;
      x = arg.x, y = arg.y;
      return this.grid.find(".row" + y + "#cell" + x);
    };

    Grid.prototype._add_grid_to_container = function() {
      return this.container.append(this._grid());
    };

    Grid.prototype._grid = function() {
      this.grid = jQuery('<table/>');
      _.times(this.height, (function(_this) {
        return function(row_number) {
          return _this.grid.append(_this._row(row_number));
        };
      })(this));
      return this.grid;
    };

    Grid.prototype._row = function(row_number) {
      var row;
      row = jQuery('<tr/>');
      return _.times(this.width, (function(_this) {
        return function(cell_number) {
          return row.append(_this._cell(row_number, cell_number));
        };
      })(this));
    };

    Grid.prototype._cell = function(row_number, cell_number) {
      var cell;
      cell = jQuery('<td/>', {
        "class": "row" + row_number,
        id: "cell" + cell_number,
        'data-state': 0
      });
      return cell.data('coordinates', {
        x: cell_number,
        y: row_number
      });
    };

    return Grid;

  })();

  $((function(_this) {
    return function() {
      return new CellularAutomata({
        container: jQuery('#container'),
        rules: _this.demo_rules
      }).render({
        rule: 'conways_game_of_life'
      });
    };
  })(this));

  this.demo_rules = {
    conways_game_of_life: {
      name: "Conway's Game of Life",
      states: 2,
      colors: ['inherit', '#E8107C'],
      rule: function(x, y, grid) {
        var east, north, northeast, northwest, number_of_live_neighbors, self, south, southeast, southwest, west;
        self = grid.state({
          x: x,
          y: y
        });
        northwest = grid.state({
          x: x - 1,
          y: y - 1
        });
        north = grid.state({
          x: x,
          y: y - 1
        });
        northeast = grid.state({
          x: x + 1,
          y: y - 1
        });
        west = grid.state({
          x: x - 1,
          y: y
        });
        east = grid.state({
          x: x + 1,
          y: y
        });
        southwest = grid.state({
          x: x - 1,
          y: y + 1
        });
        south = grid.state({
          x: x,
          y: y + 1
        });
        southeast = grid.state({
          x: x + 1,
          y: y + 1
        });
        number_of_live_neighbors = _.compact([northwest, north, northeast, west, east, southwest, south, southeast]).length;
        switch (false) {
          case number_of_live_neighbors !== 3:
            return true;
          case !(number_of_live_neighbors < 2):
            return false;
          case !(number_of_live_neighbors > 3):
            return false;
          default:
            return self;
        }
      }
    },
    fire_propagation: {
      name: 'Fire Propagation',
      states: 7,
      colors: ['inherit', 'black', '#ED6509', '#ED6509', '#ED6509', '#ED6509', '#632E0A'],
      rule: function(x, y, grid) {
        var BURNED_OUT, FIREBREAK, FIRESTART, NORMAL, chance_of_catching_fire, east, neighbors, north, northeast, northwest, number_of_burning_neighbors, self, south, southeast, southwest, west;
        NORMAL = 0;
        FIREBREAK = 1;
        FIRESTART = 2;
        BURNED_OUT = 6;
        self = grid.state({
          x: x,
          y: y
        });
        if (self === FIREBREAK) {
          return FIREBREAK;
        }
        if (self > FIREBREAK) {
          return Math.min(self + 1, BURNED_OUT);
        }
        northwest = grid.state({
          x: x - 1,
          y: y - 1
        });
        north = grid.state({
          x: x,
          y: y - 1
        });
        northeast = grid.state({
          x: x + 1,
          y: y - 1
        });
        west = grid.state({
          x: x - 1,
          y: y
        });
        east = grid.state({
          x: x + 1,
          y: y
        });
        southwest = grid.state({
          x: x - 1,
          y: y + 1
        });
        south = grid.state({
          x: x,
          y: y + 1
        });
        southeast = grid.state({
          x: x + 1,
          y: y + 1
        });
        neighbors = [northwest, north, northeast, west, east, southwest, south, southeast];
        number_of_burning_neighbors = _.size(_.filter(neighbors, function(neighbor) {
          return neighbor > FIREBREAK && neighbor < BURNED_OUT;
        }));
        chance_of_catching_fire = number_of_burning_neighbors * 1 / 8;
        if (Math.random() < chance_of_catching_fire) {
          return FIRESTART;
        }
        return self;
      }
    },
    wire_world: {
      name: 'Wire World',
      states: 4,
      colors: ['inherit', 'black', 'yellow', 'orange'],
      rule: function(x, y, grid) {
        var BACKGROUND, HEAD, TAIL, WIRE, east, neighbors, north, northeast, northwest, number_of_active_neighbors, self, south, southeast, southwest, west;
        BACKGROUND = 0;
        WIRE = 1;
        HEAD = 2;
        TAIL = 3;
        self = grid.state({
          x: x,
          y: y
        });
        if (self === BACKGROUND) {
          return BACKGROUND;
        }
        if (self === HEAD) {
          return TAIL;
        }
        if (self === TAIL) {
          return WIRE;
        }
        northwest = grid.state({
          x: x - 1,
          y: y - 1
        });
        north = grid.state({
          x: x,
          y: y - 1
        });
        northeast = grid.state({
          x: x + 1,
          y: y - 1
        });
        west = grid.state({
          x: x - 1,
          y: y
        });
        east = grid.state({
          x: x + 1,
          y: y
        });
        southwest = grid.state({
          x: x - 1,
          y: y + 1
        });
        south = grid.state({
          x: x,
          y: y + 1
        });
        southeast = grid.state({
          x: x + 1,
          y: y + 1
        });
        neighbors = [northwest, north, northeast, west, east, southwest, south, southeast];
        number_of_active_neighbors = _.size(_.filter(neighbors, function(neighbor) {
          return neighbor === HEAD;
        }));
        if (number_of_active_neighbors === 1 || number_of_active_neighbors === 2) {
          return HEAD;
        }
        return WIRE;
      }
    },
    rule_110: {
      name: 'Rule 110',
      states: 2,
      colors: ['inherit', '#E8107C'],
      rule: function(x, y, grid) {
        var north, northeast, northwest, outcomes, self, value;
        self = grid.state({
          x: x,
          y: y
        });
        if (self) {
          return 1;
        }
        northwest = grid.state({
          x: x - 1,
          y: y - 1
        });
        north = grid.state({
          x: x,
          y: y - 1
        });
        northeast = grid.state({
          x: x + 1,
          y: y - 1
        });
        outcomes = [0, 1, 1, 1, 0, 1, 1, 0];
        value = parseInt([northwest, north, northeast].join(''), 2);
        return outcomes[value] || 0;
      }
    }
  };

}).call(this);
